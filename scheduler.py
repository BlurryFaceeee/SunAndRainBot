import asyncio
from aiogram import Bot
from datetime import datetime, timedelta
import sqlite3
from config import WEATHER_TOKEN
import requests

async def send_scheduled_notifications(bot: Bot):
    while True:
        try:
            current_utc_time = datetime.utcnow()

            conn = sqlite3.connect('notifications.db')
            c = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            c.execute("SELECT user_id, city, notification_time, timezone_offset FROM notifications WHERE is_active=1")
            notifications = c.fetchall()

            for notification in notifications:
                notification_id, id, city, notify_time, timezone_offset = notification

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                target_time = datetime.strptime(notify_time, "%H:%M").time()
                current_time_with_offset = (current_utc_time + timedelta(hours=timezone_offset)).time()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (—Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞) —Å –≤—Ä–µ–º–µ–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if (current_time_with_offset.hour == target_time.hour and
                        current_time_with_offset.minute == target_time.minute):

                    try:
                        weather = await get_weather(city)
                        await bot.send_message(
                            chat_id=id,
                            text=f"‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {city}:\n{weather}"
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–ª—è {id}: {e}")

            conn.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        await asyncio.sleep(60)

async def get_weather(city: str) -> str:
    code_to_smile = {
        "Clear": "—è—Å–Ω–æ ‚òÄÔ∏è",
        "Clouds": "–æ–±–ª–∞—á–Ω–æ ‚òÅÔ∏è",
        "Rain": "–¥–æ–∂–¥—å üåß",
        "Drizzle": "–¥–æ–∂–¥—å üåß",
        "Thunderstorm": "–≥—Ä–æ–∑–∞ ‚ö°Ô∏è",
        "Snow": "—Å–Ω–µ–≥ üå®Ô∏è",
        "Mist": "—Ç—É–º–∞–Ω üå´"
    }
    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_token}&units=metric&lang=ru"
        )
        data = r.json()

        city = data["name"]
        cur_weather = data["main"]["temp"]
        # humidity = data["main"]["humidity"]

        description = data["weather"][0]["main"]
        if description in code_to_smile:
            wd = code_to_smile[description]
        else:
            wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞...ü§∑"

        cur = cur_weather
        if cur <= -15:
            cur = "–º–æ—Ä–æ–∑"
        elif cur > -15 and cur <= 8:
            cur = "—Ö–æ–ª–æ–¥–Ω–æ"
        elif cur > 8 and cur <= 23:
            cur = "—Ç–µ–ø–ª–æ"
        elif cur >= 23:
            cur = "–∂–∞—Ä–∫–æ"

        return f"–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city} {cur_weather} C¬∞\n–ù–∞ —É–ª–∏—Ü–µ {cur}, {wd}"

    except requests.exceptions.RequestException:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É...üò¢\n–ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ"
    except KeyError:
        return "–ü—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!üßê"
